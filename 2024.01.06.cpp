#include <stdio.h>
// 数据类型

//char		字符数据类型;   
//short		短整形;			 
//int			整形;			
//long		长整形;
//long long	更长的整形;
//float		单精度浮点数;
//double		双进度浮点数;
//	类型的意义：使用类型开辟内存空间大小（大小决定使用范围）
//
//整形家族:
//	char : unsigned char(无符号)  signed char(有符号的);   
//	char 类型在 ASCII 码中是整数 所以是整形 
//
//	short: unsigned short(无符号) signed short(有符号);
//
//	int: unsigned int(无符号)   unsigned int(有符号);
//
//	long: unsigned long(无符号)   unsigned long(有符号);
//
//
//浮点数家族:
//	float   单精度浮点数;
//	double  双精度浮点数;
//
//构造类形:
//	数组类型;
//	结构体类型; struct 
//	枚举类型    enum;
//	联合类型    union;
//
//指针类型:
//	int* pi;
//	char* pc;
//	float* pf;
//	void* pv;
//	void 表示空类型 ：通常用于函数的返回类型、函数的参数、指针类型;
//
//
//计算机的存储： 计算机中的整数有三种表示方法，原码、反码、补码;
//三种表示方法均有符号位和数值位两部分，符号位都是用0表示 正 ，用 1 表示负
//而数值位 （负整数的三种表示方法不相同）
//
//无符号数：原码。反码、补码 都相同;
//
//整数分为： 正数，负数;
//正数： 原码。反码、补码 都相同
//
//负数的原码。反码、补码 表示方法各不相同
//
//原码：直接将数翻译成二进制序列
//
//反码：原码的符号位不变，其他位依次取反
//
//补码：反码 + 1 得到补码;
//
//c = -5;
//100000000000000000000000 00000101  原码;
//11111111111111111111111 11111010  反码;
//11111111111111111111111111111011  补码;
//
//1111 1111 1111 1111 1111 1111 1111 1011  补码;
// 15   15   15   15   15   15   15   11	
//0xFFFFFFFB 通过补码转换为内存的16进制数;

		//int main()
		//{
		//	int c = 0x11223344;
		//	//内存显示结果为 44 33 22 11; 为小端存储;
		//	return 0;
		//}
/*什么是大小端存储;
				:如  int c = 0x11223344;  这个序列 11为高端，44为低端 ;
				内存的构成分区是： 低地址 和高地址 ;
				
				大端存储为：是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址
					中；  如 int c = 0x11223344; 若在内存显示为 11 22 33 44 则为大端存储;
				
				小段存储：是指数据的低位保存在内存的低地址中，而数据的高位, ，保存在内存的高地
					址中  如 int c = 0x11223344; 若在内存显示为 44 33 22 11 则为小端存储; */